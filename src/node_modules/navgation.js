const bel = require('bel')
const csjs = require('csjs-inject')
const button = require('datdot-ui-button')
const path = require('path')
const filename = path.basename(__filename)

module.exports = navigation

function navigation (opts, protocol) {
    let recipients = []
    const { page = 'PLANS', flow, buttons } = opts
    const widget = 'ui-nav-bottom'
    const send2Parent = protocol( pageReceive )
    send2Parent({page, from: 'navgation', flow: flow ? `${flow}/${widget}` : widget, type: 'init', filename, line: 14})

    const user = button({page, name: 'user', content: 'USER', style: 'nav', color: 'white', custom: [css.user], disabled: true}, handlePageProtocol('user'))
    const plans = button({page, name: 'plans', content: 'PLANS', style: 'nav', color: 'white', custom: [css.plans], disabled: false, current: true}, handlePageProtocol('plans'))
    const jobs = button({page, name: 'jobs', content: 'JOBS', style: 'nav', color: 'white', custom: [css.jobs]}, handlePageProtocol('jobs'))
    const apps = button({page, name: 'apps', content: 'APPS', style: 'nav', color: 'white', custom: [css.apps], disabled: true}, handlePageProtocol('apps'))
    const nav = bel`<nav class=${css.navbar}>${user}${plans}${jobs}${apps}</nav>`
    
    return nav

    function actionSwitch(args, message) {
        const { page, from, flow, type, action, body } = message
        const classList = []
        args.forEach( (btn, i) => {
            const target = btn.getAttribute('name')
            classList.push( target )
            const type = target === from ? 'current-active' : 'remove-current'
            const name = target === from ? from : classList[i]
            const log = { page, from: name, flow, type}
            recipients[name](log)
            if (type === 'remove-current') return 
            return send2Parent({...log, body, filename, line: 34})
        })
    }

    function handlePageProtocol (name) {
        return send => {
            recipients[name] = send
            return pageReceive
        }
    }

    function pageReceive (message) {
        const { page, from, flow, type, action, body } = message
        if ( type === 'click') actionSwitch([...nav.children], message)
    }
}

const css = csjs`
.navbar {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    background-color: var(--white);
}
.navbar button {
    margin: 0;
}
.navbar button:hover {
    color: var(--grey70);
    background-color: inherit;
}
.navbar button[class*='current']:hover {
    background-color: var(--greyF2);
}
.user {}
.plans {}
.jobs {}
.apps {}
`