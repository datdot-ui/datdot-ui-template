const bel = require('bel')
const csjs = require('csjs-inject')
const button = require('datdot-ui-button')

module.exports = navigation

function navigation (opts, protocol) {
    let recipients = []
    const { page = 'PLANS', flow, buttons } = opts
    const widget = 'nav-bottom'
    const send2Parent = protocol( pageReceive )
    send2Parent({page, from: widget, type: 'init'})

    const user = button({page, name: 'user', content: 'USER', style: 'nav', color: 'white', custom: [css.user]}, handlePageProtocol('user'))
    const plans = button({page, name: 'plans', content: 'PLANS', style: 'nav', color: 'white', custom: [css.plans], disabled: false, current: true}, handlePageProtocol('plans'))
    const jobs = button({page, name: 'jobs', content: 'JOBS', style: 'nav', color: 'white', custom: [css.jobs]}, handlePageProtocol('jobs'))
    const apps = button({page, name: 'apps', content: 'APPS', style: 'nav', color: 'white', custom: [css.apps]}, handlePageProtocol('apps'))
    const nav = bel`<nav class=${css.navbar}>${user}${plans}${jobs}${apps}</nav>`
    
    return nav

    function handlePageProtocol (name) {
        return send => {
            recipients[name] = send
            return pageReceive
        }
    }

    function pageReceive (message) {
        const { page, from, flow, type, action, body, filename, line } = message
        if ( type === 'click') {
            [...nav.children].forEach( btn => {
                btn.classList.remove( [...btn.classList][4] )
                if ( btn.getAttribute('name') === from ) {
                    recipients[from]({page, from, type: 'active'})
                    send2Parent({page, from, type: 'render page'})
                }
            } )
        }
    }
}

const css = csjs`
.navbar {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    background-color: var(--white);
}
.user {}
.plans {}
.jobs {}
.apps {}
`