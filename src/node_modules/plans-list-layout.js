const bel = require('bel')
const csjs = require('csjs-inject')
const path = require('path')
const filename = path.basename(__filename)
const layout = require('layout')
const button = require('datdot-ui-button')
const svg = require('datdot-ui-graphic')

module.exports = plansList

function plansList ({page}, protocol) {
    const send2Parent = protocol( createNewPlanReceive )
    const iconCreate = svg({css: `${css.icon} ${css.create}`, path: '../node_modules/datdot-ui-graphic/assets/plus.svg'})
    const iconCryFace = svg({css: `${css.icon} ${css['cry-face']}`, path: 'assets/cry-face.svg'})
    const section = layout({layoutName: 'plans', layoutStyle: css.plansList, content: myPlans()})

    send2Parent({page, from: 'plans-list', type: 'ready', filename, line: 15})
    
    return section

    function myPlans () {
        const createPlan = button({page, name: 'create-plan', content: iconCreate, style: 'solid', color: 'dark', custom: [css['create-plan']], disabled: false}, createNewPlanProtocol('create-plan'))
        const planList = bel`<div class=${css['plan-list']}></div>`
        // display plan list
        createPlanItems()

        return bel`
        <header>
            <div class=${css['header-top']}>
                <h1 class=${css.title}>My plans</h1>
                <div class=${css['plan-counts']}>No plan yet ${iconCryFace}</div>
            </div>
            <div class=${css['plans-group']}>
                ${createPlan}
                <div class=${css.scrollable}>
                    ${planList}
                </div>
            </div>
        </header>`

        function createPlanItems() {
            for (let i = 1; i < 9; i++) {
                let item = bel`<div index=${i} role="plan" class="${css.plan}" aria-label="no plan"></div>`
                planList.append(item)
            }
       }
    }

    function createNewPlanProtocol(name) {
        return send => {
            return createNewPlanReceive
        }
    }
    
    function createNewPlanReceive (message) {
        const { page, from, flow, type, action, body, filename, line } = message
        console.log(message );
        if (type === 'click') console.log( `create new plan in line ${line} `)
    }
}

const css = csjs`
.plansList {}
.header-top {
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: repeat(2, 50%);
    align-items: flex-end;
    margin-bottom: 13px;
}
.title {
    font-size: 2.6rem;
}
.plan-counts {
    display: flex;
    font-size: 1.4rem;
    color: var(--grey70);
    justify-self: right;
}
.cry-face {
    width: 22px;
    margin-left: 10px;
}
.plans-group {
    display: grid;
    grid-template-rows: repeat(2, 47px);
    grid-template-columns: 40px auto;
    grid-gap: 10px;
    overflow: hidden;
}
.create-plan {
    grid-row-start: 1;
    grid-row-end: 3;
    height: 100%;
    display: grid;
    justify-content: center;
    align-items: center;
}
.icon {}
.create {
    width: 16px;
}
.plan-list {
    display: grid;
    grid-gap: 10px;
    grid-template-rows: repeat(2, minmax(44px, 1fr));
    grid-template-columns: repeat(auto-fit, minmax(auto, 137px));
    grid-auto-flow: column;
}
.plan {
    width: 137px;
    height: 44px;
    background-color: var(--greyED); 
    border-radius: 8px;
    border: 1px dashed var(--grey88);
}
.scrollable {
    height: 110px;
    overflow-y: auto;
}
`